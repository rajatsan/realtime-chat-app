{"version":3,"sources":["api/index.js","components/LoginComponent/index.js","components/LoginComponent/LoginComponent.jsx","api/socket.js","components/HomeComponent/index.js","components/HomeComponent/HomeComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","sessionApi","headers","Accept","Content-Type","LoginComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","field","e","setState","defineProperty","target","value","login","asyncToGenerator","regenerator_default","a","mark","_callee","_this$state","username","password","res","user","wrap","_context","prev","next","state","fetch","method","body","JSON","stringify","sent","json","onLogin","t0","console","log","stop","signup","_this$state2","confPassword","then","r","status","error","renderLogin","react_default","createElement","onClick","onChange","renderSignUp","React","Component","socket","io","connect","on","err","HomeComponent","logout","onLogout","App","isLoading","_this2","catch","className","CircularProgress","components_HomeComponent","components_LoginComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5511a99b.chunk.js","sourcesContent":["module.exports = {\n  sessionApi: '/api/session',\n  \n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}","import LoginComponent from './LoginComponent';\n\nexport default LoginComponent;","import React from 'react';\n\nimport { headers, sessionApi } from '../../api';\nimport './LoginComponent.css';\n\nclass LoginComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      confPassword: '',\n      signup: false\n    }\n  }\n\n  handleInput = field => e => {\n    this.setState({\n      [field]: e.target.value\n    })\n  }\n\n  login = async () => {\n    const { username, password } = this.state;\n\n    try {\n      const res = await fetch(sessionApi, {\n        method: 'put',\n        body: JSON.stringify({ username, password }),\n        headers\n      });\n      const user = await res.json();\n      this.props.onLogin(user.username);\n    } catch {\n      console.log('username/password is invalid')\n    }\n  }\n\n  signup = () => {\n    const { username, password, confPassword } = this.state;\n\n    fetch(sessionApi, {\n      method: 'post',\n      body: JSON.stringify({ username, password }),\n      headers\n    })\n    .then(r => {\n      if (r.status == 200) {\n        // signup successfull, go to login\n        this.setState({ signup: false });\n      } else {\n        // user already exists perhaps\n        console.error('already exists')\n      }\n    });\n  }\n\n  renderLogin = () => (\n    <div>\n      <div>Login</div>\n      <button onClick={this.login}>Login</button>\n      <div>Username<input onChange={this.handleInput('username')}/></div>\n      <div>Password<input onChange={this.handleInput('password')}/></div>\n      <hr />\n      <div>New user? </div>\n      <button onClick={() => this.setState({ signup: true })}>Signup </button>\n    </div>\n  )\n  \n\n  renderSignUp = () => (\n    <div>\n      <div>Signup</div>\n      <button onClick={this.signup}>Signup</button>\n      <div>Username<input onChange={this.handleInput('username')}/></div>\n      <div>Password<input onChange={this.handleInput('password')}/></div>\n      <div>Confirm Password<input onChange={this.handleInput('confPassword')}/></div>\n      <hr />\n      <div>Existing user? </div>\n      <button onClick={() => this.setState({ signup: false })}>Login </button>\n    </div> \n  )\n\n  render() {\n    return (\n      <div>\n        {this.state.signup ? \n          this.renderSignUp()\n          :\n          this.renderLogin()\n        }\n      </div>\n    )\n  }\n}\n\nexport default LoginComponent;","import io from 'socket.io-client';\n\nconst socket = io.connect('http://localhost:5000');\n\nsocket.on('error', function (err) {\n  console.log('socket error', err);\n});\n\n\nexport function sendMessage() {\n  socket.emit('message', 'hello', res => console.log(JSON.stringify(res)))\n}\n\nexport function register(onMessageReceived) {\n  socket.on('message', onMessageReceived)\n};\n\nexport function unregister() {\n  socket.off('message');\n}\n\n\n","import HomeComponent from './HomeComponent';\n\nexport default HomeComponent;","import React from 'react';\nimport { sessionApi } from '../../api';\nimport { sendMessage, register } from '../../api/socket';\n\nimport './HomeComponent.css';\n\nclass HomeComponent extends React.Component {\n\n  componentDidMount() {\n    // register(k => {\n    //   console.log('got response', k);\n    //   sendMessage('kkkk');\n    // });\n  }\n\n  logout = () => {\n    fetch(sessionApi, {\n      method: 'delete'\n    })\n    .then(this.props.onLogout);\n  }\n\n  render() {\n    return (\n      <div>Home\n        <button onClick={this.logout}>Logout</button>\n        <div>Logged in as {this.props.user}</div>\n      </div>\n    )\n  }\n}\n\nexport default HomeComponent;","import React, { Component } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nimport LoginComponent from './components/LoginComponent';\nimport HomeComponent from './components/HomeComponent';\nimport { sessionApi } from './api';\n\nimport 'typeface-roboto';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    username: '',\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    // check if user is logged in. If yes, put username in state.\n    fetch(sessionApi)\n      .then(res => res.json())\n      .then(res =>  {\n        if (res.user && res.user.username) {\n          this.setState({ username: res.user.username, isLoading: false })\n        } else {\n          this.setState({ username: '', isLoading: false })\n        }\n      })\n      .catch(err => { this.setState({isLoading: false}); console.log(err)});\n  }\n\n  onLogout = () => {\n    this.setState({ username: '' });\n  }\n\n  onLogin = (username) => {\n    this.setState({ username })\n  }\n  \n  render() {\n    if (this.state.isLoading) {\n      return <div className='body'><CircularProgress /></div>\n    }\n\n    return (\n      <div>\n        {this.state.username ? \n          <HomeComponent onLogout={this.onLogout} user={this.state.username}/> : <LoginComponent onLogin={this.onLogin}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}